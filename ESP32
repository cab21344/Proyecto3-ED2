// Electrónica Digital 2 - Proyecto 2
// María Daniela Cabrera Porras, 21344

// Librerías ******************************************************
#include <Arduino.h>
#include <Wire.h>              //librería para comunicación I2C
#include <Adafruit_NeoPixel.h> //librería para neopixel
#include <Adafruit_MPU6050.h>  //librería sensor

//*****************************************************************

// Definiciones ***************************************************
#define NUMPIXELS 16 // numero de pixeles
#define LEDS 23      // pin de neopixeles
//*****************************************************************

// Variables ******************************************************
String bufferTiva;

Adafruit_MPU6050 mpu;

//*****************************************************************

// Inicia NeoPixels **********************************************
Adafruit_NeoPixel pixels(NUMPIXELS, LEDS, NEO_GRB);

void encendido();
void midiendo();
void guardando();
void datosguardados();
void error();

void setup()
{
  // Inicia NeoPixels
  pixels.begin();
  pixels.clear();
  pixels.setBrightness(155);

  pixels.setPixelColor(0, pixels.Color(255, 192, 203)); // pone los leds en rosado
  pixels.show();

  // start the serial connection
  Serial.begin(115200);
  Serial2.begin(115200);

  // wait for serial monitor to open
  while (!Serial)
    ;
  Serial.print("Conectando...");

  // configuración sensor
  Wire.begin();

  Serial.println("Adafruit MPU6050 test!");

  // Try to initialize!
  if (!mpu.begin())
  {
    Serial.println("Failed to find MPU6050 chip");
    Serial.println("Program will exit due to sensor initialization failure");
    exit(1); // Detener la ejecución del programa
  }
}

void loop()
{
  // obtener datos del acelerómetro
  if (mpu.getMotionInterruptStatus())
  {
    // Get new sensor events with the readings
    sensors_event_t a, g, temp;
    mpu.getEvent(&a, &g, &temp);

    // Print out the values
    Serial.print("AccelX:");
    Serial.print(a.acceleration.x);
    Serial.print(",");
    Serial.print("AccelY:");
    Serial.print(a.acceleration.y);
    Serial.print(",");
    Serial.print("AccelZ:");
    Serial.print(a.acceleration.z);

    /*encendido(); // Neopixel
    delay(1000);
    midiendo(); // Neopixel
    delay(1000);
    guardando(); // Neopixel
    delay(1000);
    datosguardados();
    delay(1000);
    error(); // Neopixel
    delay(1000);*/

    if (Serial2.available() > 0)
    {
      bufferTiva = Serial2.readStringUntil('\n');
      bufferTiva.trim(); // Eliminar espacios en blanco y caracteres no deseados
      if (bufferTiva == "measure")
      {
        Serial.println("Midiendo...");
        String dataToSend = String(a.acceleration.x) + " ; " + String(a.acceleration.y) + " ; " + String(a.acceleration.z);
        Serial2.print(dataToSend); // Envía la información al ESP32 como una sola cadena

        Serial.println("Se envió satisfactoriamente la información:");
        Serial.print("Posición en x ; y ; z");
        Serial.print(a.acceleration.x);
        Serial.print(" ; ");
        Serial.println(a.acceleration.y);
        Serial.print(" ; ");
        Serial.println(a.acceleration.z);
        Serial.println("--------------------------------------------");

        bufferTiva = "";

        midiendo(); // Neopixel
        delay(500);
      }

      if (bufferTiva == "saving")
      {
        guardando(); // Neopixel
        delay(200);
      }

      if (bufferTiva == "saved")
      {
        datosguardados(); //Neopixel
        delay(300);
      }

      if (bufferTiva == "on")
      {
        encendido(); // Neopixel
        delay(500);
      }

      if (bufferTiva == "error")
      {
        error();
        delay(500);
      }
    }
  }
}

// Voids para programar Neopixel ************************************
void midiendo() // luces que muestra que se mide el sensor
{
  for (int j = 0; j < 3; j++)
  { // Repetir tres veces
    for (int i = 0; i < NUMPIXELS; i++)
    {
      pixels.setPixelColor(i, pixels.Color(255, 165, 0)); // Naranja
      pixels.show();
      delay(100);
      pixels.clear();
      pixels.show();
    }
  }
}

void guardando()
{ // luces que muestran que se estan guardando los datos
  for (int j = 0; j < 3; j++)
  { // Repetir tres veces
    for (int i = 0; i < NUMPIXELS; i++)
    {
      pixels.setPixelColor(i, pixels.Color(0, 200, 200)); // Celeste
      pixels.show();
      delay(100);
      pixels.clear();
      pixels.show();
    }
  }
}

void datosguardados() // luces que muestra que se guardaron los datos
{
  for (int j = 0; j < 3; j++)
  {
    for (int i = 0; i < NUMPIXELS; i++)
    {
      pixels.setPixelColor(i, pixels.Color(0, 255, 0)); // Verde
    }
    pixels.show();
    delay(500);
    pixels.clear();
    pixels.show();
    delay(500);
  }
}

void error() // luces que muestra que se obtuvo un error
{
  for (int j = 0; j < 3; j++)
  {
    for (int i = 0; i < NUMPIXELS; i++)
    {
      pixels.setPixelColor(i, pixels.Color(255, 0, 0)); // Rojo
    }
    pixels.show();
    delay(500);
    pixels.clear();
    pixels.show();
    delay(500);
  }
}

void encendido() // luces que muestra que se obtuvo un error
{
  for (int j = 0; j < 3; j++)
  {
    for (int i = 0; i < NUMPIXELS; i++)
    {
      pixels.setPixelColor(i, pixels.Color(255, 120, 180)); // Rosado
    }
    pixels.show();
    delay(500);
    pixels.clear();
    pixels.show();
    delay(500);
  }
}
