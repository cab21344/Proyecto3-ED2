// Electrónica Digital 2 - Proyecto 2
// María Daniela Cabrera Porras, 21344

// Librerías ******************************************************
#include <Arduino.h>
#include <Wire.h>              //librería para comunicación I2C
#include <Adafruit_NeoPixel.h> //librería para neopixel
#include <Adafruit_MPU6050.h>  //librería sensor
#include <Adafruit_Sensor.h>   //librería sensor

//*****************************************************************

// Definiciones ***************************************************
#define NUMPIXELS 16 // numero de pixeles
#define LEDS 23      // pin de neopixeles

#define SDA_PIN 21 // pines sensor
#define SCL_PIN 22
//*****************************************************************

// Variables ******************************************************
String bufferTiva;

Adafruit_MPU6050 mpu;

//*****************************************************************

// Inicia NeoPixels **********************************************
Adafruit_NeoPixel pixels(NUMPIXELS, LEDS, NEO_GRB);

void encendido();
void midiendo();
void guardando();
void datosguardados();
void error();

void setup()
{
  // start the serial connection
  Serial.begin(115200);
  Serial2.begin(115200);

  // Inicia NeoPixels
  pixels.begin();
  pixels.clear();
  pixels.setBrightness(155);

  pixels.setPixelColor(0, pixels.Color(255, 192, 203)); // pone los leds en rosado
  pixels.show();

  // wait for serial monitor to open
  while (!Serial)
    ;
  Serial.print("Conectando...");

  // Sensro MPU6050
  Serial.println("Iniciando MPU6050...");

  // Inicializar el sensor MPU6050
  if (!mpu.begin())
  {
    Serial.println("Error al encontrar el chip MPU6050. Verifica las conexiones.");
    while (1)
    {
      delay(10);
    }
  }

  Serial.println("MPU6050 encontrado correctamente!");

  // Configuración de rangos y filtro del MPU6050
  mpu.setAccelerometerRange(MPU6050_RANGE_8_G);
  mpu.setGyroRange(MPU6050_RANGE_500_DEG);
  mpu.setFilterBandwidth(MPU6050_BAND_21_HZ);

  mpu.setHighPassFilter(MPU6050_HIGHPASS_0_63_HZ);
  mpu.setMotionDetectionThreshold(1);
  mpu.setMotionDetectionDuration(20);
  mpu.setInterruptPinLatch(true); // Keep it latched.  Will turn off when reinitialized.
  mpu.setInterruptPinPolarity(true);
  mpu.setMotionInterrupt(true);

  delay(100);
}

void loop()
{
  sensors_event_t a, g, temp;
  mpu.getEvent(&a, &g, &temp);

  //Serial.println("Dentro del loop");
  //Serial2.println("Comunicación con el ESP32");

  if (Serial2.available() > 0)
  {
    bufferTiva = Serial2.readStringUntil('\n');
    bufferTiva.trim(); // Eliminar espacios en blanco y caracteres no deseados

    if (bufferTiva == "m")
    {
      Serial.println("Midiendo...");
      String dataToSend = String(g.gyro.x) + " ; " + String(g.gyro.y) + " ; " + String(g.gyro.z);
      Serial2.print(dataToSend); // Envía la información al ESP32 como una sola cadena

      Serial.println("Se envió satisfactoriamente la información:");
      Serial.print("Giro en x ; y ; z");
      Serial.print(g.gyro.x);
      Serial.print(" ; ");
      Serial.println(g.gyro.y);
      Serial.print(" ; ");
      Serial.println(g.gyro.z);
      Serial.println("--------------------------------------------");

      bufferTiva = "";

      midiendo(); // Neopixel
      delay(500);
    }
    else if (bufferTiva == "s")
    {
      guardando(); // Neopixel
      delay(200);
    }
    else if (bufferTiva == "d")
    {
      datosguardados(); // Neopixel
      delay(300);
    }
    else if (bufferTiva == "on")
    {
      encendido(); // Neopixel
      delay(500);
    }
    else if (bufferTiva == "e")
    {
      error();
      delay(50);
    }
  }

  delay(3000);
}

// Voids para programar Neopixel ************************************
void midiendo() // luces que muestra que se mide el sensor
{
  for (int j = 0; j < 3; j++)
  { // Repetir tres veces
    for (int i = 0; i < NUMPIXELS; i++)
    {
      pixels.setPixelColor(i, pixels.Color(255, 165, 0)); // Naranja
      pixels.show();
      delay(100);
      pixels.clear();
      pixels.show();
    }
  }
}

void guardando()
{ // luces que muestran que se estan guardando los datos
  for (int j = 0; j < 3; j++)
  { // Repetir tres veces
    for (int i = 0; i < NUMPIXELS; i++)
    {
      pixels.setPixelColor(i, pixels.Color(0, 200, 200)); // Celeste
      pixels.show();
      delay(100);
      pixels.clear();
      pixels.show();
    }
  }
}

void datosguardados() // luces que muestra que se guardaron los datos
{
  for (int j = 0; j < 3; j++)
  {
    for (int i = 0; i < NUMPIXELS; i++)
    {
      pixels.setPixelColor(i, pixels.Color(0, 255, 0)); // Verde
    }
    pixels.show();
    delay(500);
    pixels.clear();
    pixels.show();
    delay(500);
  }
}

void error() // luces que muestra que se obtuvo un error
{
  for (int j = 0; j < 3; j++)
  {
    for (int i = 0; i < NUMPIXELS; i++)
    {
      pixels.setPixelColor(i, pixels.Color(255, 0, 0)); // Rojo
    }
    pixels.show();
    delay(500);
    pixels.clear();
    pixels.show();
    delay(500);
  }
}

void encendido() // luces que muestra que se obtuvo un error
{
  for (int j = 0; j < 3; j++)
  {
    for (int i = 0; i < NUMPIXELS; i++)
    {
      pixels.setPixelColor(i, pixels.Color(255, 120, 180)); // Rosado
    }
    pixels.show();
    delay(500);
    pixels.clear();
    pixels.show();
    delay(500);
  }
}
